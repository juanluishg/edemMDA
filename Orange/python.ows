<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script_remove features" position="(406.0, 198.0)" />
		<node id="1" name="Datasets" qualified_name="Orange.widgets.data.owdatasets.OWDataSets" project_name="Orange3" version="" title="zoo" position="(152.0, 199.0)" />
		<node id="2" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table" position="(315.0, 91.0)" />
		<node id="3" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="data table_result" position="(599.0, 198.0)" />
		<node id="4" name="Datasets" qualified_name="Orange.widgets.data.owdatasets.OWDataSets" project_name="Orange3" version="" title="wine" position="(153.0, 397.0)" />
		<node id="5" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table " position="(309.0, 290.0)" />
		<node id="6" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script_round numbers" position="(409.0, 396.0)" />
		<node id="7" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="data table_result" position="(602.0, 395.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="1" sink_node_id="2" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="1" source_node_id="1" sink_node_id="0" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="2" source_node_id="0" sink_node_id="3" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="3" source_node_id="4" sink_node_id="5" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="4" source_node_id="4" sink_node_id="6" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="5" source_node_id="6" sink_node_id="7" source_channel="Data" sink_channel="Data" enabled="true" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01\x90\x00\x00\x00\xbc\x00\x00\x04\xe5\x00\x00\x02\xc9\x00\x00\x01\x90\x00\x00\x00\xd2\x00\x00\x04\xe5\x00\x00\x02\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x01\x90\x00\x00\x00\xd2\x00\x00\x04\xe5\x00\x00\x02\xc9', 'scriptLibrary': [{'name': 'Std Cleanup', 'script': '# assumes all the data variables are in columns\n#    X1          X2\n#  X1_val1     X2_val1\n#  X1_val2     X2_val2\n#    ...         ...\n\nimport numpy as np\nfrom Orange.data import Table\n\nwork_data=np.asarray(in_data.copy())\n\n# Modify the number of standard deviation for which you consider\n# the outliers: mean+/- STD_trigger\nSTD_trigger = 2 #anything outside 2*SD is outlier in this case\n\n#need to have std(0) for columns, std(1) for rows\nsd=np.array(work_data).std(0) \nmean=np.array(work_data).mean(0) \n\ntr_max=mean+STD_trigger*sd\ntr_min=mean-STD_trigger*sd\n\n#a_1=np.putmask(work_data,work_data&gt;=tr_max,tr_max-1)\na1=work_data.clip(max=tr_max-1)\na2=a1.clip(min=tr_min+1)\n\ndomain=in_data.domain\nout_data=Table(domain,a2)', 'filename': None}, {'name': 'Corr_Matrix', 'script': 'from pandas import DataFrame\nfrom Orange.data import Table\n\n#work_data=np.asarray(in_data.copy())\nwork_data=in_data.copy()\n# find number of columns\n#cols=len(work_data[0])\n\n# the target variable is always the last column\n#y=work_data[:,cols-1]\n# X are the rest\n#X=work_data[:,0:cols-1]\n\n#get correlations of each features in dataset\n#corrmat = work_data.corr()\n#top_corr_features = corrmat.index\ncolNames=in_data.domain\ndf=DataFrame(work_data)\ncorrMtx=df.corr()\ndomain=in_data.domain\nout_data=Table(domain,corrMtx)\n', 'filename': None}, {'name': 'Tips', 'script': '# TIPS\n# This script has no running code but has some tips on Python coding\n\n# You need to import the Table from Orange if you want to export your data and make it useable\n# to other widgets\n#            from Orange.data import Table\n\n# To get the input data in an array, use the following command\n# always use a copy of the input data to avoid changing the source data\n#            input numpy as np\n#            work_data=np.asarray(in_data.copy())\n\n# find number of columns in the input dataset\n#            cols=len(work_data[0])\n\n# the target variable is always the last column\n#            y=work_data[:,cols-1]\n\n# X are the rest\n#            X=work_data[:,0:cols-1]\n\n\n# The following command gets the names of the variables on the columns\n#            domain=in_data.domain\n\n# Finally to export you data (assume it is in a variable called work_data, \n# use the following command using the Orange Table\n#            out_data=Table(domain,work_data)\n', 'filename': None}], 'scriptText': 'from Orange.data import Domain, Table\ndomain = Domain([attr for attr in in_data.domain.attributes\n                 if attr.is_continuous or len(attr.values) &lt;= 5],\n                in_data.domain.class_vars)\n\nout_data = Table(domain, in_data)\nprint(out_data.domain)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x016\x00\x00\x00\xe6\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 2}</properties>
		<properties node_id="1" format="literal">{'controlAreaVisible': True, 'header_state': b'\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xb2\x00\x00\x00\x07\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\xff\xff\xff\xff\x00\x00\x00\x81\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Z\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00[\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03\xe8\x00\x00\x00\x00d', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xe6\x00\x00\x00\xa0\x00\x00\x04\xa5\x00\x00\x02\xa9\x00\x00\x00\xe6\x00\x00\x00\xb6\x00\x00\x04\xa5\x00\x00\x02\xa9\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xe6\x00\x00\x00\xb6\x00\x00\x04\xa5\x00\x00\x02\xa9', 'selected_id': 'core/zoo.tab', 'splitter_state': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01,\x00\x00\x00\xc8\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 1}</properties>
		<properties node_id="2" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x016\x00\x00\x00\x93\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="3" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x016\x00\x00\x00\x93\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'header_state': b'\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xb2\x00\x00\x00\x07\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\xff\xff\xff\xff\x00\x00\x00\x81\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Z\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00[\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03\xe8\x00\x00\x00\x00d', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xe6\x00\x00\x00\xa0\x00\x00\x04\xa5\x00\x00\x02\xa9\x00\x00\x00\xe6\x00\x00\x00\xb6\x00\x00\x04\xa5\x00\x00\x02\xa9\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xe6\x00\x00\x00\xb6\x00\x00\x04\xa5\x00\x00\x02\xa9', 'selected_id': 'core/wine.tab', 'splitter_state': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01,\x00\x00\x00\xc8\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 1}</properties>
		<properties node_id="5" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x016\x00\x00\x00\x93\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01\x90\x00\x00\x00\xad\x00\x00\x04\x0f\x00\x00\x02\xa2\x00\x00\x01\x90\x00\x00\x00\xc3\x00\x00\x04\x0f\x00\x00\x02\xa2\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x01\x90\x00\x00\x00\xc3\x00\x00\x04\x0f\x00\x00\x02\xa2', 'scriptLibrary': [{'name': 'Std Cleanup', 'script': '# assumes all the data variables are in columns\n#    X1          X2\n#  X1_val1     X2_val1\n#  X1_val2     X2_val2\n#    ...         ...\n\nimport numpy as np\nfrom Orange.data import Table\n\nwork_data=np.asarray(in_data.copy())\n\n# Modify the number of standard deviation for which you consider\n# the outliers: mean+/- STD_trigger\nSTD_trigger = 2 #anything outside 2*SD is outlier in this case\n\n#need to have std(0) for columns, std(1) for rows\nsd=np.array(work_data).std(0) \nmean=np.array(work_data).mean(0) \n\ntr_max=mean+STD_trigger*sd\ntr_min=mean-STD_trigger*sd\n\n#a_1=np.putmask(work_data,work_data&gt;=tr_max,tr_max-1)\na1=work_data.clip(max=tr_max-1)\na2=a1.clip(min=tr_min+1)\n\ndomain=in_data.domain\nout_data=Table(domain,a2)', 'filename': None}, {'name': 'Corr_Matrix', 'script': 'from pandas import DataFrame\nfrom Orange.data import Table\n\n#work_data=np.asarray(in_data.copy())\nwork_data=in_data.copy()\n# find number of columns\n#cols=len(work_data[0])\n\n# the target variable is always the last column\n#y=work_data[:,cols-1]\n# X are the rest\n#X=work_data[:,0:cols-1]\n\n#get correlations of each features in dataset\n#corrmat = work_data.corr()\n#top_corr_features = corrmat.index\ncolNames=in_data.domain\ndf=DataFrame(work_data)\ncorrMtx=df.corr()\ndomain=in_data.domain\nout_data=Table(domain,corrMtx)\n', 'filename': None}, {'name': 'Tips', 'script': '# TIPS\n# This script has no running code but has some tips on Python coding\n\n# You need to import the Table from Orange if you want to export your data and make it useable\n# to other widgets\n#            from Orange.data import Table\n\n# To get the input data in an array, use the following command\n# always use a copy of the input data to avoid changing the source data\n#            input numpy as np\n#            work_data=np.asarray(in_data.copy())\n\n# find number of columns in the input dataset\n#            cols=len(work_data[0])\n\n# the target variable is always the last column\n#            y=work_data[:,cols-1]\n\n# X are the rest\n#            X=work_data[:,0:cols-1]\n\n\n# The following command gets the names of the variables on the columns\n#            domain=in_data.domain\n\n# Finally to export you data (assume it is in a variable called work_data, \n# use the following command using the Orange Table\n#            out_data=Table(domain,work_data)\n', 'filename': None}], 'scriptText': 'import numpy as np\nout_data = in_data.copy()\n#copy, otherwise input data will be overwritten\nnp.round(out_data.X, 0, out_data.X)', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x016\x00\x00\x00\xe6\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 2}</properties>
		<properties node_id="7" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x016\x00\x00\x00\x93\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x016\x00\x00\x00\xa9\x00\x00\x05\x95\x00\x00\x02q', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
